/*
 * Copyright 2016, TeamDev Ltd. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.spine3.gradle.protobuf.util

import com.google.common.base.Predicate
import com.google.common.base.Predicates
import groovy.util.logging.Slf4j

import static com.google.protobuf.DescriptorProtos.FileDescriptorProto
import static com.google.protobuf.DescriptorProtos.FileDescriptorSet
import static java.util.Collections.emptyList

/**
 * A utility class which allows to obtain Protobuf file descriptors.
 *
 * @author Alexander Litus
 */
@Slf4j
class GroovyDescriptorSetUtil {

    private static final String MSG_ENABLE_DESCRIPTOR_SET_GENERATION =
            "Please enable descriptor set generation. See an appropriate section at " +
            "https://github.com/google/protobuf-gradle-plugin/blob/master/README.md#customize-code-generation-tasks"

    /**
     * Returns descriptors of all `.proto` files described in the descriptor set file.
     *
     * @param descriptorSetFilePath the path to the file generated by `protobuf-gradle-plugin`
     *      which contains the info about project `.proto` files
     * @param filter a filter predicate to apply to the files
     * @return a list of descriptors
     */
    static Collection<FileDescriptorProto> getProtoFileDescriptors(GString descriptorSetFilePath) {
        return getProtoFileDescriptors(descriptorSetFilePath, Predicates.alwaysTrue());
    }

    /**
     * Returns descriptors of `.proto` files described in the descriptor set file
     * which match the filter predicate.
     *
     * @param descriptorSetFilePath the path to the file generated by `protobuf-gradle-plugin`
     *      which contains the info about project `.proto` files
     * @param filter a filter predicate to apply to the files
     * @return a list of descriptors
     */
    static Collection<FileDescriptorProto> getProtoFileDescriptors(GString descriptorSetFilePath,
                                                                   Predicate<FileDescriptorProto> filter) {
        if (!new File(descriptorSetFilePath).exists()) {
            log.warn(MSG_ENABLE_DESCRIPTOR_SET_GENERATION)
            return emptyList()
        }
        final List<FileDescriptorProto> fileDescriptors = new LinkedList<>()
        new FileInputStream(descriptorSetFilePath).withStream {
            final FileDescriptorSet descriptorSet = FileDescriptorSet.parseFrom(it)
            descriptorSet.fileList.each { FileDescriptorProto file ->
                if (filter.apply(file)) {
                    fileDescriptors.add(file)
                }
            }
        }
        return fileDescriptors
    }

    static class IsNotGoogleProto implements Predicate<FileDescriptorProto> {
        @Override
        boolean apply(FileDescriptorProto file) {
            final boolean result = !file.package.contains("google")
            return result
        }
    }
}
